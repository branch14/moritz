// dynamic tweening script to animate MovieClip properties via Actionscript// (instead of timeline tweening)// original script by Tatsuo Kato	// TK Tween Engine "dynTweenMX" v1.34// (http://tatsuokato.com/flash/dynTweenMX.html)// usage: <myMC>.dynTween({duration:<frames>, <property>:[value, <mode>, <strength>]})// example:  ball.dynTween({duration:31, _x:[100, "inOut", 50]})// available modes are "in", "out", "inOut", "outIn", "none"trace("dynTween.as loaded.");MovieClip.prototype.tweenTo=MovieClip.prototype.dynTween = function(tween_objects) {	this.isBeingTweened=true;	var te = this.createEmptyMovieClip("tweenEngine", 20002);	var h = te.holder = new TweensHolder();	var i = arguments.length, tweens = h.tweens, T = Tween;	while(i) {		tweens.unshift(new T(this, arguments[--i]));	}	h.begin();}// initData: A list of property name and value pairs, which the caller mc is set to.MovieClip.prototype.reset = function(initObj) {	delete this.tweenEngine.removeMovieClip();	if(initObj) {		for(var i in initObj) {			this[i] = initObj[i];		}	}}ASSetPropFlags(MovieClip.prototype, ["dynTween", "reset"], 1); //-----------------------------------------------------------------------------------------------------// A class constructor for an object that contains an array of passed tween objects._global.TweensHolder = function() {	this.tweens = []; // tween objects will be put into this array. 					  // The index order is the execution order.}TweensHolder.prototype.begin = function() {	var t = this.tweens.shift();	// setUp: prototype'd method of Tween class	t.setUp();	this.cnt = 0; // cnt : current frame count	t.run(this);}//-----------------------------------------------------------------------------------------------------// A class constructor that creates tween objects_global.Tween = function(mc, tObj) {	this.init(mc, tObj);}// A method that molds easy-to-handle objects out of the passed parameter.Tween.prototype.init = function(mc, tObj) {	this.mc = mc;	this.dur = tObj.duration, delete tObj.duration; // dur : total frame count	if(tObj.callback != null) {		this.callback = tObj.callback; // callBack : callback method in a form of a full path string		delete tObj.callback;	}	if(tObj.cbArgs != null) {		this.cbArgs = tObj.cbArgs; // cbArgs : A list of the parameters to pass to the callback function		delete tObj.cbArgs;	}		this.props = {}; // props: An objects that holds name/value pairs	for(var i in tObj) {		var pt = tObj[i];		var p = this.props[i] = {};		if(typeof pt == "number") {			p.end = pt; // end: end value			p.ease = "none";		} else {			p.end = pt[0]; // pt[0]: finishing value			if(pt[1] == null) { // p[1]: A name of one of the easing functions defined below				p.ease = "none";			} else {				p.ease = pt[1];				var me = Tween.MAX_EASING;				// pt[2]: easing strength(0 to 100)				p.strength = pt[2] ?(me-1) * pt[2] / 100 + 1 : me / 2;			}		}	}	// Now the instance created with this constructor will look like:	// {dur:20, props:{_x:{end:300, ease:"out", strength:30}, _alpha:{end:20}}}}// A method, with which the tween object sets the beginning values of the properties to the values// of the mc's beginning state and set the total value changes from them.Tween.prototype.setUp =  function() {	var props = this.props	var mc = this.mc;	for(var i in props) {		var p = props[i];		p.val = p.end -(p.bgn = mc[i]); // val: value change amount, bgn: beginning value		delete p.end;	}	// Now the instance created with this constructor will look like:	// {dur:20, props:{_x:{bgn:50, val:250, ease:"out", strength:30}, _alpha:{bgn:100, val:-80}}}}// run: A method that defines onEnterFrame of the tween engine of the mc// holder: TweensHolder class instanceTween.prototype.run = function(holder) {	var o = this, mc = o.mc, d = o.dur, props = o.props;	mc.tweenEngine.onEnterFrame = function() {		var c = ++holder.cnt;		if(c <= d) {			for(var i in props) {				var p = props[i];				mc[i] = o[p.ease](c, p.bgn, p.val, d, p.strength);			}		} else {			if(holder.tweens.length) {				holder.begin();			} else {				mc.reset();			}			mc.isBeingTweened=false;			eval(o.callback)(o.cbArgs);		}	}}//-----------------------------------------------------------------------------------------------------Tween.MAX_EASING = 8;// easing functions// c: current frame count, b: beginning value,// v: total value change,  d: duration, s: strength of the easingTween.prototype["none"]  = function(c, b, v, d) { return b + v*c/d;};Tween.prototype["in"]    = function(c, b, v, d, s) { return b + v*Math.pow((c/d), s);};Tween.prototype["out"]   = function(c, b, v, d, s) {return b + v*(1 - Math.pow(1-c/d, s));};Tween.prototype["inOut"] = function(c, b, v, d, s) {	if(c <=(d/=2)) return b + v/2 * Math.pow(c/d, s);	return b + v - v/2*Math.pow(2-c/d, s);}Tween.prototype["outIn"] = function(c, b, v, d, s) {	if(c <=(d/=2)) return b + v/2 *(1 - Math.pow(1-c/d, s));	return b + v/2 *(1 + Math.pow(c/d-1, s));}////////////////////////////////////////////////////////////////////////////////////////////////////////